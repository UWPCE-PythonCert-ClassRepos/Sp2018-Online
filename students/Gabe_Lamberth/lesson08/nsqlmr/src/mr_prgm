#!/usr/bin/env python3

import mrdata
import login_database
import utilities

"""
    I only focused on pymongo and the persistent data. Trying to learn the particulars of nosql
    search criteria for the other nosql db's was just brain scrambling. I love pymongos dot notation
"""
log = utilities.configure_logger('default', '../logs/login_databases_dev.log')


def display_donor(mr):

    # Pull all donor records from the database
    log.info('View matching records from all tables')
    for i in mr:
        # For some reason, this took me forever to figure out
        print(f"{i['name']['first']}, {i['name']['last']} ${sum(i['donation']):^,.2f}")


def generate_report(data):
    header = ('Donor: First Name', 'Last Name' 'Total Given')
    print('{:25} |{:^15} |{:^15}'.format(*header))
    print('-' * 75)
    for key in data:
        print(f"{key['name']['first']:<30}, {key['name']['last']:<30}: ${sum['donation']:^,.2f}")

    print('-- Report Finished --\n')


def add_donor():
    # I will add later
    pass

def update_donor():
    # I will add later
    pass

def del_donor():
    # I will add later
    pass


def main():

    donor_items = mrdata.get_mailroom_data()

    with login_database.login_mongodb_cloud() as client:
        log.info('Creating a database called dev')
        log.info('If it doesnt exist mongodb creates it')
        db = client['dev']

        log.info('And in that database use a collection called mailroom')
        log.info('If it doesnt exist mongodb creates it')
        mailroom = db['mailroom']

        log.info("Populating Mongodb data from mrdata module")
        log.info('Inserting data into the database')
        mailroom.insert_many(donor_items)


    user_prompt = ("\n\nWelcome to the MailRoom Donar Program!\n"
                   "What would you like to do?\n"
                   "Type '1- To Add donor'\n"
                   "Type '2- To Delete a donor'\n"
                   "Type '3- To Update a donor'\n"
                   "Type '4- To Display a donor'\n"
                   "Type '5- To Generate report"
                   "Type 'q- To end the program'\n"
                   "Enter value here >> ")
    """
    Use dictionary to create quasi switch/case structure
    """
    menu_dict = {"1": display_donor,
                 "2": add_donor,
                 "3": update_donor,
                 "4": del_donor,
                 "q": "quit"}

    # Runs until user inputs 'q'
    while True:

        response = input(user_prompt)
        if menu_dict[response] == "quit":
            log.info('Delete the collection so we can start over')
            db.drop_collection('mailroom')
            break
        else:
            # Pass documents to functions
            menu_dict[response](mailroom.find({}, {'_id': 0}))


if __name__ == "__main__":
    main()